// Code generated by go-bindata.
// sources:
// query.graphql
// schema.graphql
// type/article.graphql
// type/time.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\xb1\x4a\xc6\x30\x14\xc5\xf1\x3d\x4f\x71\xa4\x8b\x82\xf4\x01\xba\x75\x74\x53\xea\x26\x0e\xb1\x3d\x6d\x2e\xa4\x49\xb8\xb9\x2a\x41\x7c\x77\x31\xe5\x5b\xff\x97\xfb\x3b\x03\x5e\x03\xf1\xf2\x49\x6d\xb0\x56\x08\x65\x51\x56\x26\xab\xf0\x31\x22\xef\xb0\x40\x30\x99\x36\x94\x2c\xff\x5d\x92\xe5\x5e\xe7\xe7\xa7\xd1\xf5\xaf\x0b\xf8\x71\xc0\x80\x85\x5e\xd7\x80\x3d\x2b\x3c\xbc\x9a\xac\x91\xf8\x68\x10\xab\x30\xb1\xc8\x47\x64\xc5\x41\xeb\x03\xbb\xc4\xb3\xe2\x3b\x30\x21\x65\x14\xaf\xfe\xa4\x51\x2b\xbc\x12\x45\xf3\x97\x6c\xdc\x46\x87\x9b\x54\xef\xbb\x31\x61\x31\x95\x74\x3c\x4c\x78\x9b\xaf\xcb\xdd\xbb\xfb\xfd\x0b\x00\x00\xff\xff\xc2\x38\x5d\xcc\xcf\x00\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 207, mode: os.FileMode(436), modTime: time.Unix(1517698163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\xb5\x80\x00\x00\x00\xff\xff\xda\x62\x79\x70\x19\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 25, mode: os.FileMode(436), modTime: time.Unix(1517698633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeArticleGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3d\x4e\x03\x31\x10\x46\xfb\x9c\xe2\x43\x14\x74\x69\x52\xb1\xdd\x8a\x08\x29\x0d\x05\xe4\x02\x13\xfb\xdb\xec\x48\x6b\x3b\x8c\x67\x85\x22\xc4\xdd\xd1\xfe\x44\x11\x1d\xdd\xd8\x7e\xf3\x9e\x1f\xd1\xe2\x24\x55\x03\xc4\x5c\xc3\xc0\xed\xc6\xaf\x17\xa2\x5d\x4e\xf8\xde\x00\x13\x33\x66\xfd\x1c\x09\x8d\xcc\xae\x9d\xd2\xb6\x1b\x40\x63\x83\xc3\xfe\x61\x46\x8e\x3d\xc1\x8b\xd6\x12\x89\x3c\xa6\x13\x0d\xa5\x83\xf7\x5a\xd1\xe9\x90\x26\x7c\x7d\x6e\x70\xc8\x7e\x5f\xca\x92\xf8\x07\x7d\xaa\x88\x6a\x0c\x5e\xe6\xc8\x6d\x7e\x93\xc4\x06\x1f\x6e\x9a\xcf\xf7\xed\xf7\xd7\x97\xdd\x6e\xf7\x8c\x28\x4e\x74\xc5\x92\xf8\x22\xe3\xec\x82\x71\xa0\x54\x42\xf3\x7c\x57\xec\xac\x59\x06\x04\xa3\x78\x31\x84\x32\x66\xb7\xeb\xd4\x59\xc9\xbd\x38\x1b\x1c\x35\xf1\x5f\x11\xd7\x44\x78\x2f\xbe\xfc\xdf\x58\xcb\x68\x81\xf8\x92\xba\x44\x18\x27\xf9\x3a\xb6\x7e\x53\xff\xfc\x06\x00\x00\xff\xff\x92\x48\x03\x1b\x79\x01\x00\x00")

func typeArticleGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeArticleGraphql,
		"type/article.graphql",
	)
}

func typeArticleGraphql() (*asset, error) {
	bytes, err := typeArticleGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/article.graphql", size: 377, mode: os.FileMode(436), modTime: time.Unix(1517698554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeTimeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\xcc\x4d\x55\xc8\x2c\x56\x48\xcc\x53\x08\x72\x73\x36\x36\x36\xb6\x54\x28\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xd0\xe3\x2a\x4e\x4e\xcc\x49\x2c\x02\x2b\xe2\x02\x04\x00\x00\xff\xff\x3c\x59\x30\xf9\x2c\x00\x00\x00")

func typeTimeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeTimeGraphql,
		"type/time.graphql",
	)
}

func typeTimeGraphql() (*asset, error) {
	bytes, err := typeTimeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/time.graphql", size: 44, mode: os.FileMode(436), modTime: time.Unix(1517698612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql": queryGraphql,
	"schema.graphql": schemaGraphql,
	"type/article.graphql": typeArticleGraphql,
	"type/time.graphql": typeTimeGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"article.graphql": &bintree{typeArticleGraphql, map[string]*bintree{}},
		"time.graphql": &bintree{typeTimeGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

