// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6f\x6f\xdb\xb6\x13\x7e\xed\x7c\x8a\xab\x80\x5f\x25\xd5\x0e\x25\xf7\xd7\x0e\x98\x65\x19\x48\x93\x6c\xd8\x90\x2e\x49\x9b\xbd\x18\x86\xbd\x60\xc8\xb3\xc4\x94\x22\x55\x92\x76\xe2\xb5\xfe\xee\x03\xf5\x2f\xb6\xdb\x6c\xc3\xb0\x19\x81\x23\x9e\xee\x79\xee\xee\x39\x1e\xe9\xf9\xb3\xb3\xcb\xd3\x9b\x5f\xae\xce\xa1\x74\x95\x5c\x1c\xcd\xdb\x7f\xa3\x79\x89\x94\x2f\x8e\x46\xa3\xb9\x14\xea\x03\x18\x94\x79\x60\xdd\x46\xa2\x2d\x11\x5d\x00\xa5\xc1\x65\x1e\x94\xce\xd5\x76\x96\x24\x8c\xab\x3b\x4b\x98\xd4\x2b\xbe\x94\xd4\x20\x61\xba\x4a\xe8\x1d\x7d\x48\xa4\xb8\xb5\x49\x61\x68\x5d\x8a\x8f\x32\x49\xc9\x34\x25\x2f\x87\x35\x61\xd6\x06\x90\x34\x61\x2c\x33\xa2\x76\x60\x0d\xfb\xdb\xb4\x4b\x74\xac\x4c\xa6\x64\x4a\xd2\xf6\x99\x54\x42\x91\x3b\x1b\x2c\xe6\x49\x4b\xf7\x4f\x99\x0d\x52\xe6\x92\xe9\x6b\xf2\x9a\xbc\x6a\x17\xff\x21\xf5\x31\xd7\xd5\xbf\x46\xff\xa4\xd4\x07\xe4\xf3\xa4\x6b\xf0\xfc\x56\xf3\x0d\x34\xad\xcd\x83\x7b\xc1\x5d\x39\x83\x69\x9a\xfe\x2f\x83\x12\x45\x51\xba\x7e\x55\x51\x53\x08\x35\x83\x34\x03\xbd\x46\xb3\x94\xfa\x7e\x06\xa5\xe0\x1c\x55\x16\x34\xd9\x72\xb1\x06\xc1\xf3\xa0\x0f\x19\xf4\xac\x3b\x44\xeb\x32\x0b\x16\x17\x9a\x72\xa1\x0a\x42\xc8\x3c\xe1\x62\xbd\x53\xaa\x7f\x1c\x2d\x57\x8a\x39\xa1\x15\x58\x74\xa7\x5a\x7f\x10\x18\x29\x5a\xe1\x64\x4d\xe5\x0a\x27\x9c\x6e\x6c\x0c\x9f\xbc\xe3\x68\x4d\x0d\xe0\x43\x2d\x0c\x5a\xc8\x21\x08\xb2\xc6\x2a\x96\x10\xed\x7a\x35\x6e\x9c\x3a\x84\x1c\x14\xde\xc3\x19\x75\x18\xc5\xad\xef\xc8\xdb\x89\x45\x77\x23\x2a\x8c\x9a\x45\xd1\x2d\x62\x18\xb7\x3c\x2f\x5e\xbe\x7a\xf1\x4d\xea\xff\xa6\x69\x9a\xc6\x3d\x72\x27\x70\xd6\x67\x91\x07\x30\x6e\x42\x11\xa7\x7f\xbe\x39\x7d\xef\x8c\x50\x45\x1f\x6b\xdb\x7c\x73\xcd\x56\x15\x2a\x47\x58\x53\x9a\xcf\x89\x56\x08\x63\x08\x1a\x70\xd4\x54\x09\x9f\x3f\x43\x10\xc4\x00\xe3\xa1\xbe\xb1\x0f\x53\x53\x57\xe6\x49\x57\xa7\x41\xb7\x32\x0a\xae\x8c\xae\x84\x45\x62\xd0\x6a\xb9\xc6\x28\x3e\xea\x63\x0d\x42\x16\x7b\x42\xee\xaa\xe7\xd7\xe7\xd7\x7b\x49\x64\xc3\x4b\x46\x21\x87\x83\x7c\x89\xad\xa5\x70\x51\x98\x85\x5d\x55\x4b\x6d\x22\xef\x2c\xf2\x34\x13\x30\x07\x46\x89\x44\x55\xb8\x32\x13\xe3\xf1\x5e\x0b\x18\xe4\xc0\xe8\xaf\xe2\xb7\x4e\xc0\xfb\x52\x48\x84\x88\x11\x56\x52\x73\xe2\xa2\x34\xce\xf3\x10\xc2\xb8\x75\x24\x76\x75\x6b\x5b\xfd\xa6\x13\xd6\x71\xf6\xda\xfb\x16\x33\x22\x14\xc7\x87\xcb\x65\xd4\x16\x11\x43\x9e\x43\x1a\x43\x27\xcb\x2e\x41\xeb\xd0\x71\x1c\x92\x6d\x77\xc5\x54\x2b\x29\xb3\x2f\x05\x44\x43\x2d\xee\x4b\x08\x00\x7f\xd2\xcf\x71\x98\x67\xf0\x96\x3e\x1c\x9f\x14\x98\x1f\x7f\xdb\x7d\xb2\x30\x6b\x51\x07\xed\xf1\x03\x73\x7d\xf1\x9d\x3f\xc2\xd0\x44\xdd\xf2\x8a\x1a\x5a\x0d\x9b\xb8\xcb\xaf\x39\xe6\xa2\xa0\x1d\xeb\x8f\x32\x98\xf4\x02\x57\xe8\x4a\xcd\x67\x10\xd4\xda\xba\x60\xd2\x1a\xfd\x88\xa3\xb1\xb3\xde\x69\x14\x9e\x30\x86\xb5\x0b\x67\x10\xd2\xba\x96\x82\x51\x9f\x40\x72\x67\xb5\x0a\x27\x47\xb0\xf3\xf1\xce\xa7\x5a\x39\x54\xee\xf8\x66\x53\xe3\x13\x90\x9e\x76\xe5\x4a\x6d\xc4\xef\xcd\xbb\x70\xb6\xb3\xe1\x02\xb9\x61\x25\x62\x10\xfb\x2d\x1d\x86\x2d\x60\xdb\x01\xfd\xd1\x33\x83\x1f\xdf\x5f\xfe\x44\xda\x4e\x89\xe5\xe6\xa0\xfc\xce\x93\x19\xe4\xa8\x9c\xa0\xd2\xce\x20\x10\x8a\xc9\x15\xc7\xae\xcc\x6d\x4c\x5c\x89\x2a\x1a\xf4\x8c\x0c\xda\x5a\x2b\x3b\xec\xf4\x5e\xbd\xde\x4e\x1c\x3e\xb8\x61\x2c\x9f\x84\xbf\xd1\x7c\x33\x50\x38\xb3\x19\x64\xf4\xc5\xbf\xdb\x71\x82\xbc\x2d\xa2\xa6\xc6\xe2\x3e\xbc\x43\x88\x65\x74\x08\x22\x9c\x3a\x0a\xcf\x9f\xc3\x57\x5f\x90\x95\x45\x73\xa1\x0b\xa1\x86\x0c\x46\xa3\xc7\x03\x31\x6c\x65\x0d\x27\x7f\x85\x9e\xc0\xff\xd3\xae\xc0\x28\x86\x7c\xf1\x48\xe6\x73\x2a\xbe\x20\x8c\x77\xc2\x8d\x46\x4c\x2b\xab\x25\x12\xa9\x8b\x28\x6c\x3d\x81\x72\x8e\xfc\x59\x38\x81\xaf\x81\x07\xe8\xb6\x7f\xda\xf6\xb6\xde\xd2\xf5\xe2\x29\xc1\xba\x09\xdf\x02\xa3\x8e\x95\x10\xa1\x31\xda\x3c\x26\x75\xd0\x49\x0f\xe9\x11\x5d\x37\xbb\xf1\xf5\xdf\xef\xfc\xf5\x7a\x76\xf9\x96\x18\x54\x1c\x4d\xd4\x78\x34\x46\xc2\x0c\x52\x87\xe7\x12\xfd\xec\x46\xdf\x37\x57\xd6\xf5\xc5\x04\x3e\x2d\xdb\x29\x9c\x1d\x4c\xe5\xb6\xdb\x89\xc3\xb8\x17\xe8\x3a\xf4\x9b\xcd\x0f\x3c\x7a\xbc\xf5\x9a\x7a\x9b\x2c\xf6\xae\x5b\xbf\xd7\x17\x47\xf3\xa4\xf9\x7d\xf5\x47\x00\x00\x00\xff\xff\x36\x64\x85\xe1\x76\x09\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 2422, mode: os.FileMode(493), modTime: time.Unix(1568930064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

