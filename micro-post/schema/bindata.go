// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xbb\x4e\x33\x31\x10\x85\x7b\x3f\xc5\xd9\x54\x7f\x5e\xc1\xe5\x1f\x28\xd2\x44\x01\x44\x85\x28\xac\xf5\x64\x63\x69\xd7\x13\x3c\x13\x42\x84\xf2\xee\xc8\xde\x0b\x90\x48\x04\x89\x6a\xbd\x73\xf9\xce\x19\x8f\xa5\xde\x52\xe7\xf0\x6e\x80\x97\x3d\xa5\xa3\xc5\x5d\xfe\x98\x93\x31\x21\x2a\xa5\x8d\xab\x09\x2b\xf6\x54\x4a\x82\xb7\x58\xde\x54\x39\x3b\x3b\x6c\x9d\x22\x08\x22\x91\x27\x8f\x0d\x27\x38\xec\x58\x74\x66\xf4\xb8\x23\xac\x59\x14\xa1\xdb\xb5\xd4\x51\x54\xb9\x84\x00\x1a\xb4\x25\x8b\x07\x4d\x21\x36\x06\x48\xf4\x1a\xe8\x20\x16\xf7\xe5\xb0\xe0\x18\xa9\xd6\xc0\x31\x0b\x16\x68\x9f\xb8\x82\x15\x75\x49\x2c\x96\x51\x0d\x8a\x23\x5b\xcc\x9c\x41\x3e\xe9\xa5\x9d\x7c\x43\x62\xf1\xd4\x27\x6f\x7d\x43\xcf\xb9\xdb\x35\xb4\x8c\x1b\xb6\x58\x0f\xa7\xea\x0c\x93\x2b\x0b\xa0\xde\x27\xe1\x34\x7a\x88\xec\x69\x9c\x63\xea\x18\x19\xa5\x7e\xeb\x64\x45\x6f\x9a\x63\x16\xff\x99\x5b\x72\xb1\xea\xe3\xeb\x7c\x11\xbc\x97\x8b\x5c\x9e\x4c\x17\x93\x50\xb6\x1d\xfd\x97\xff\x49\x88\x45\xff\x3c\x5f\x86\xfc\x38\xdd\xb7\x4b\x7d\x14\x4a\x57\xf6\xd2\x3a\xd1\x95\xeb\xa6\x8d\x57\xbf\x5a\x79\x79\x8f\x85\x94\x57\xf9\xaf\xc7\xcd\x07\xf5\xde\xca\x10\xac\xe6\xb6\xc8\x9a\x93\xf9\x08\x00\x00\xff\xff\xd1\xbf\xcb\xe5\xd7\x02\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 727, mode: os.FileMode(420), modTime: time.Unix(1578092299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

